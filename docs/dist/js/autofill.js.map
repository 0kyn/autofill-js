{
  "version": 3,
  "sources": ["../../src/js/utils.ts", "../../src/js/constants.ts", "../../src/js/overlay.ts", "../../src/js/config-manager.ts", "../../src/js/random.ts", "../../src/js/event.ts", "../../src/js/handlers/handler.ts", "../../src/js/handlers/text-handler.ts", "../../src/js/handlers/select-handler.ts", "../../src/js/handlers/file-handler.ts", "../../src/js/handlers/checkbox-radio-handler.ts", "../../src/js/handlers/datalist-handler.ts", "../../src/js/form-processor.ts", "../../src/js/autofill.ts"],
  "sourcesContent": ["import type { AutofillInput } from './types/autofill.types'\n\nexport const isObject = (thing: unknown): thing is object =>\n  typeof thing === 'object' && !Array.isArray(thing) && thing !== null\n\nexport const hasProp = (obj: object, name: string): boolean =>\n  Object.prototype.hasOwnProperty.call(obj, name)\n\nexport const asArray = <T>(item: T | T[]): T[] => Array.isArray(item) ? item : [item]\n\nexport const itemExists = <T>(item: T, array: T[] | T[][]): boolean => {\n  for (let i = 0; i < array.length; i++) {\n    const element = array[i]\n    if (item === element) {\n      return true\n    } else if (Array.isArray(element) && itemExists(item, element)) {\n      return true\n    }\n  }\n\n  return false\n}\n\nexport const truncate = (string: string, length: number): string =>\n  string.slice(0, Math.max(0, length))\n\nexport const toCamelCase = (string: string): string => {\n  const split = string.split('-').length > 1 ? string.split('-') : string.split('_')\n\n  return split.map((item, index) => {\n    if (index > 0) {\n      item = item.charAt(0).toUpperCase() + item.slice(1)\n    }\n\n    return item\n  }).join('')\n}\n\nexport const notContainsAttributes = (input: AutofillInput, attributes: string[]): boolean => {\n  const excludedAttributes = new Set(attributes)\n\n  return input.getAttributeNames().every(attr => {\n    return !excludedAttributes.has(attr)\n  })\n}\n\nexport const notContainsTypes = (input: AutofillInput, types: string[]): boolean =>\n  !types.includes(input.type)\n\nexport const isValidUrl = (url?: string | boolean): url is string =>\n  typeof url === 'string' && url.length > 0\n\nexport const loadFromJson = async<AutofillOptions>(url: string): Promise<AutofillOptions> => {\n  const response = await fetch(url)\n  const string = await response.text()\n\n  try {\n    const object = JSON.parse(string) as AutofillOptions\n\n    return object\n  } catch (error) {\n    console.error(error)\n    throw new Error('Failed to parse JSON')\n  }\n}\n", "export default {\n  CDN_JS_URL: 'https://cdn.jsdelivr.net/npm/autofill-js@2.0.2/dist/js/autofill.min.js',\n  CDN_CSS_URL: 'https://cdn.jsdelivr.net/npm/autofill-js@2.0.2/dist/css/autofill.min.css',\n  DEV_HOSTS: [\n    '127.0.0.1:5100',\n    '127.0.0.1:5101',\n  ],\n}\n", "/* eslint-disable @stylistic/max-len */\nimport { Autofill } from './autofill'\nimport { ConfigManager } from './config-manager'\nimport type { AutofillConfig, AutofillDomForm, AutofillForm, AutofillOptions } from './types/autofill.types'\nimport constants from './constants'\n\nexport default class Overlay {\n  constructor(\n    private autofill: Autofill,\n    private configManager: ConfigManager,\n    public domForms: AutofillDomForm[],\n  ) {}\n\n  // @todo nombre de form d\u00E9tect\u00E9 dans le dom\n  public init(): void {\n    const link = document.createElement('link')\n    link.setAttribute('rel', 'stylesheet')\n    link.setAttribute('type', 'text/css')\n    link.onload = this.show.bind(this)\n    link.setAttribute('href', Overlay.cssLink())\n    document.querySelectorAll('head')[0].append(link)\n  }\n\n  private show(): void {\n    const autofill = this.autofill\n    ;(document.querySelector('body') as HTMLElement).style.paddingTop = '35px'\n\n    const html = `\n      <div class=\"autofill-overlay\">\n        <div class=\"autofill-overlay-brand\">\n          <span class=\"autofill-overlay-name\">${autofill.infos.name}</span>\n          <span class=\"autofill-overlay-version\">${autofill.infos.version}</span>\n        </div>\n        <div class=\"autofill-overlay-buttons\">\n          <button type=\"button\" class=\"js-btn-infos\">${Overlay.icon('information-circle-outline')}</button>\n          <button type=\"button\" class=\"js-btn-autofill\">${Overlay.icon('play-outline')}</button>\n          <button type=\"button\" class=\"js-btn-reset\">${Overlay.icon('reload-outline')}</button>\n        </div>\n        <div class=\"autofill-overlay-links\">\n          <a class=\"npm\" href=\"${autofill.infos.npm}\" title=\"NPM package\">${Overlay.icon('npm')}</a>\n          <a class=\"github\" href=\"${autofill.infos.github}\" title=\"Github repository\">${Overlay.icon('github')}</a>\n        </div>\n      </div>\n      `\n    document.body.insertAdjacentHTML('beforeend', html)\n\n    ;(document.querySelector('.js-btn-reset') as HTMLButtonElement).addEventListener('click', () => {\n      this.domForms.forEach(domForm => {\n        if (domForm.form !== null) {\n          domForm.form.reset()\n        }\n        domForm.inputs.forEach(input => {\n          if (input instanceof HTMLInputElement) {\n            input.checked = false\n            if (autofill.configManager.config.valueAttribute) {\n              input.removeAttribute('value')\n            }\n          }\n        })\n      })\n    })\n\n    ;(document.querySelector('.js-btn-autofill') as HTMLButtonElement).addEventListener('click', () => {\n      this.autofill.fill()\n    })\n\n    ;(document.querySelector('.js-btn-infos') as HTMLButtonElement).addEventListener('click', () => {\n      const config = { ...this.configManager.config }\n      const forms = { ...this.configManager.forms }\n\n      const groupTitleStyle = 'color: #81aece;'\n      const configTitleStyle = 'color: #b24bd6;'\n      const consoleLogKeyStyle = 'color: #cf7b3a; font-weight: 600;'\n\n      console.log(`%cAutofill.js - v${this.autofill.infos.version}`, `\n        padding: 0.5rem 1.5rem;\n        color: #212529;\n        background-color: #81aece;\n      `)\n\n      console.groupCollapsed('%cAutofill Instance', groupTitleStyle)\n      console.log(this.autofill)\n      console.groupEnd()\n\n      console.groupCollapsed('%cInfos', groupTitleStyle)\n      console.table(this.autofill.infos)\n      console.groupEnd()\n\n      // BEGIN config\n      console.groupCollapsed('%cConfig', groupTitleStyle)\n\n      console.groupCollapsed('%cDefault', configTitleStyle)\n      for (const key in this.configManager.defaultConfig) {\n        const value = this.configManager.defaultConfig[key as keyof AutofillConfig]\n        console.log(`%c${key}`, consoleLogKeyStyle, value)\n      }\n      console.groupEnd()\n\n      console.groupCollapsed('%cConstructor', configTitleStyle)\n      for (const key in this.configManager.options) {\n        const value = this.configManager.options[key as keyof AutofillOptions]\n        console.log(`%c${key}`, consoleLogKeyStyle, value)\n      }\n      console.groupEnd()\n\n      console.group('%cInstance', configTitleStyle)\n      for (const key in config) {\n        const value = config[key as keyof AutofillConfig]\n        console.log(`%c${key}`, consoleLogKeyStyle, value)\n      }\n      console.groupEnd()\n\n      console.groupEnd()\n      // END config\n\n      if (Object.keys(forms).length > 0) {\n        console.groupCollapsed('%cForms', groupTitleStyle)\n        for (const selector in forms) {\n          const form = forms[selector]\n          const inputs = form.inputs\n          console.groupCollapsed(`%c${selector}`, 'color: #e74747')\n          for (const key in form) {\n            if (key !== 'inputs') {\n              console.log(`%c${key}`, consoleLogKeyStyle, form[key as keyof AutofillForm])\n            }\n          }\n          console.table(inputs)\n\n          console.groupEnd()\n        }\n        console.groupEnd()\n      }\n    })\n  }\n\n  private static cssLink(): string\n  {\n    const { CDN_CSS_URL, DEV_HOSTS } = constants\n    const devPorts = DEV_HOSTS.map(host => host.split(':')[1])\n\n    return devPorts.includes(window.location.port)\n      ? `//${window.location.host}/dist/css/autofill.css`\n      : CDN_CSS_URL\n  }\n\n  private static icon(name: string): string {\n    const icons: Record<string, string> = {\n      'npm': `<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-${name}\" viewBox=\"0 0 512 512\"><title>NPM package</title><path fill=\"currentColor\" d=\"M227.6 213.1H256v57.1h-28.4z\"/><path fill=\"currentColor\" d=\"M0 156v171.4h142.2V356H256v-28.6h256V156zm142.2 142.9h-28.4v-85.7H85.3v85.7H28.4V184.6h113.8zm142.2 0h-56.9v28.6h-56.9V184.6h113.8zm199.2 0h-28.4v-85.7h-28.4v85.7h-28.4v-85.7H370v85.7h-56.9V184.6h170.7v114.3z\"/></svg>`,\n\n      'github': `<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-${name}\" viewBox=\"0 0 512 512\"><title>Github repository</title><path fill=\"currentColor\" d=\"M256 32C132.3 32 32 134.9 32 261.7c0 101.5 64.2 187.5 153.2 217.9a17.56 17.56 0 003.8.4c8.3 0 11.5-6.1 11.5-11.4 0-5.5-.2-19.9-.3-39.1a102.4 102.4 0 01-22.6 2.7c-43.1 0-52.9-33.5-52.9-33.5-10.2-26.5-24.9-33.6-24.9-33.6-19.5-13.7-.1-14.1 1.4-14.1h.1c22.5 2 34.3 23.8 34.3 23.8 11.2 19.6 26.2 25.1 39.6 25.1a63 63 0 0025.6-6c2-14.8 7.8-24.9 14.2-30.7-49.7-5.8-102-25.5-102-113.5 0-25.1 8.7-45.6 23-61.6-2.3-5.8-10-29.2 2.2-60.8a18.64 18.64 0 015-.5c8.1 0 26.4 3.1 56.6 24.1a208.21 208.21 0 01112.2 0c30.2-21 48.5-24.1 56.6-24.1a18.64 18.64 0 015 .5c12.2 31.6 4.5 55 2.2 60.8 14.3 16.1 23 36.6 23 61.6 0 88.2-52.4 107.6-102.3 113.3 8 7.1 15.2 21.1 15.2 42.5 0 30.7-.3 55.5-.3 63 0 5.4 3.1 11.5 11.4 11.5a19.35 19.35 0 004-.4C415.9 449.2 480 363.1 480 261.7 480 134.9 379.7 32 256 32z\"/></svg>`,\n\n      'information-circle-outline': `<svg xmlns=\"http://www.w3.org/2000/svg\"  class=\"icon icon-${name}\" viewBox=\"0 0 512 512\"><title>Infos (checkout developer tools console)</title><path d=\"M248 64C146.39 64 64 146.39 64 248s82.39 184 184 184 184-82.39 184-184S349.61 64 248 64z\" fill=\"none\" stroke=\"currentColor\" stroke-miterlimit=\"10\" stroke-width=\"32\"/><path fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"32\" d=\"M220 220h32v116\"/><path fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"32\" d=\"M208 340h88\"/><path fill=\"currentColor\" d=\"M248 130a26 26 0 1026 26 26 26 0 00-26-26z\"/></svg>`,\n\n      'play-outline': `<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-${name}\" viewBox=\"0 0 512 512\"><title>Fill forms</title><path d=\"M112 111v290c0 17.44 17 28.52 31 20.16l247.9-148.37c12.12-7.25 12.12-26.33 0-33.58L143 90.84c-14-8.36-31 2.72-31 20.16z\" fill=\"none\" stroke=\"currentColor\" stroke-miterlimit=\"10\" stroke-width=\"32\"/></svg>`,\n\n      'reload-outline': `<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"icon icon-${name}\" viewBox=\"0 0 512 512\"><title>Reset forms</title><path d=\"M400 148l-21.12-24.57A191.43 191.43 0 00240 64C134 64 48 150 48 256s86 192 192 192a192.09 192.09 0 00181.07-128\" fill=\"none\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"32\"/><path fill=\"currentColor\" d=\"M464 97.42V208a16 16 0 01-16 16H337.42c-14.26 0-21.4-17.23-11.32-27.31L436.69 86.1C446.77 76 464 83.16 464 97.42z\"/></svg>`,\n    }\n\n    return icons[name]\n  }\n}\n", "import * as utils from './utils'\nimport type {\n  AutofillConfig,\n  AutofillOptions,\n  AutofillForms,\n  AutofillForm,\n  AutofillInfos,\n} from './types/autofill.types'\n\nexport class ConfigManager {\n  public readonly defaultConfig: Readonly<AutofillConfig> = {\n    enable: true,\n    overlay: false,\n    url: false,\n    formsSelectors: ['form'],\n    validateInputAttributes: ['minlength', 'maxlength'],\n    autosubmit: false,\n    camelize: false,\n    events: ['input', 'change'],\n    generate: false,\n    inputAttributes: ['data-autofill', 'name', 'id', 'class'],\n    inputAttributesSkip: [],\n    inputTypesSkip: [],\n    inputsSelectors: ['input', 'textarea', 'select', 'progress', 'meter'],\n    override: false,\n    random: false,\n    randomPreset: false,\n    valueAttribute: true,\n  }\n\n  public readonly infos: Readonly<AutofillInfos> = {\n    author: '0kyn',\n    version: '2.0.2',\n    name: 'Autofill.js',\n    github: 'https://github.com/0kyn/autofill-js',\n    npm: 'https://www.npmjs.com/package/autofill-js',\n  }\n\n  private _config: AutofillConfig\n\n  private _forms: AutofillForms = {}\n\n  private _options: AutofillOptions = {}\n\n  constructor(options?: AutofillOptions) {\n    this._options = options ?? {}\n    this._config = { ...this.defaultConfig }\n\n    if (options) {\n      this.applyOptions(options)\n    }\n  }\n\n  public get options(): Readonly<AutofillOptions> {\n    return this._options\n  }\n\n  public get config(): Readonly<AutofillConfig> {\n    return this._config\n  }\n\n  public get forms(): Readonly<AutofillForms> {\n    return this._forms\n  }\n\n  public get isEnabled(): boolean {\n    return this._config.enable\n  }\n\n  public applyOptions(options: AutofillOptions): void {\n    this.validateOptions(options)\n\n    const { inputs, forms, ...configOptions } = options\n\n    this.validateConfigOptions(configOptions)\n\n    this._config = {\n      ...this._config,\n      ...configOptions,\n    }\n\n    this._config.formsSelectors = this.buildFormsSelectors(forms)\n    this._forms = this.buildForms(forms, inputs)\n  }\n\n  public async loadFromUrl(url: string): Promise<void> {\n    if (!utils.isValidUrl(url)) {\n      throw new Error(`Invalid URL: ${url}`)\n    }\n\n    try {\n      const configFile = await utils.loadFromJson(url)\n      const { inputs, forms, ...jsonConfig } = configFile as AutofillOptions\n\n      this.validateConfigOptions(jsonConfig)\n\n      this._config = {\n        ...this.defaultConfig,\n        ...jsonConfig,\n      }\n\n      this._config.formsSelectors = this.buildFormsSelectors(forms)\n\n      const jsonForms = this.buildForms(forms, inputs)\n      this._forms = this.mergeFormConfigs(jsonForms, this._forms)\n    } catch (error) {\n      console.error('Failed to load configuration from URL:', error)\n      throw error\n    }\n  }\n\n  public getFormConfig(formSelector?: string): AutofillConfig {\n    let formConfig: AutofillForm = {}\n\n    if (typeof formSelector === 'string' && this._forms && this._forms[formSelector]) {\n      formConfig = { ...this._forms[formSelector] }\n    }\n\n    const combinedConfig = {\n      ...this._config,\n      ...formConfig,\n    }\n\n    delete combinedConfig.inputs\n\n    return combinedConfig\n  }\n\n  public getInputConfig(\n    formSelector?: string,\n    inputKey?: string,\n  ): AutofillConfig {\n    const config = this.getFormConfig(formSelector)\n\n    if (!this.hasFormWithInputs(formSelector) || !inputKey) {\n      return config\n    }\n\n    const inputOptions = this.forms[formSelector]?.inputs?.[inputKey]\n    const inputConfig = typeof inputOptions !== 'string' ? { ...inputOptions } : {}\n    delete inputConfig?.value\n\n    if (!utils.isObject(inputConfig)) {\n      return config\n    }\n\n    return { ...config, ...inputConfig } as AutofillConfig\n  }\n\n  public findFormSelector(form: HTMLFormElement | null): string | undefined {\n    if (!form || !this._config.formsSelectors) {\n      return undefined\n    }\n    for (const formSelector of this._config.formsSelectors) {\n      if (form === document.querySelector(formSelector)) {\n        return formSelector\n      }\n    }\n\n    for (const formSelector of this._config.formsSelectors) {\n      const matchedForms = document.querySelectorAll(formSelector)\n      if ([...matchedForms].includes(form)) {\n        return formSelector\n      }\n    }\n\n    return undefined\n  }\n\n  public hasFormWithInputs(formSelector?: string): formSelector is string {\n    return typeof formSelector === 'string'\n      && !!this._forms\n      && !!this._forms[formSelector]\n      && !!this._forms[formSelector]?.inputs\n  }\n\n  private buildFormsSelectors(forms?: AutofillForm): string[] {\n    const formsSelectors = [...this._config.formsSelectors]\n    if (forms === undefined) return formsSelectors\n\n    Object.keys(forms).forEach(key => {\n      key.split(',').forEach(split => {\n        const trimed = split.trim()\n        if (!formsSelectors.includes(trimed)) {\n          formsSelectors.push(trimed)\n        }\n      })\n    })\n\n    return formsSelectors\n  }\n\n  private buildForms(formsOpt: any, inputsOpt: unknown): AutofillForms {\n    this.validateOptions(inputsOpt)\n    this.validateOptions(formsOpt)\n\n    const forms: AutofillForms = {}\n\n    const newFormOpts: Record<string, any> = {}\n    Object.keys(formsOpt ?? {}).forEach(key => {\n      key.split(',').forEach(split => {\n        newFormOpts[split.trim()] = formsOpt[key]\n      })\n    })\n\n    this._config.formsSelectors.forEach(formsSelector => {\n      forms[formsSelector] = forms[formsSelector] || {}\n\n      if (inputsOpt !== undefined) {\n        forms[formsSelector].inputs = { ...inputsOpt }\n      } else if (newFormOpts !== undefined) {\n        forms[formsSelector] = (newFormOpts as AutofillForms)[formsSelector]\n      }\n    })\n\n    return forms\n  }\n\n  private mergeFormConfigs(...sources: AutofillForms[]): AutofillForms {\n    const target: AutofillForms = {}\n\n    const deepMerge = (target: AutofillForms, source: AutofillForms): void => {\n      for (const prop in source) {\n        if (utils.hasProp(source, prop)) {\n          const sourceProp = source[prop]\n\n          if (utils.isObject(sourceProp)) {\n            target[prop] = target[prop] || {} as AutofillForm\n            deepMerge(\n              target[prop] as unknown as AutofillForms,\n              sourceProp as unknown as AutofillForms,\n            )\n          } else {\n            target[prop] = sourceProp\n          }\n        }\n      }\n    }\n\n    for (const source of sources) {\n      if (source) {\n        deepMerge(target, source)\n      }\n    }\n\n    return target\n  }\n\n  private validateOptions(options: unknown): void {\n    if (options !== undefined && !utils.isObject(options)) {\n      throw new Error('Options must be a valid object or undefined.')\n    }\n  }\n\n  private validateConfigOptions(config: unknown): void {\n    if (!config) return\n\n    const allowedKeys = Object.keys(this.defaultConfig)\n    const providedKeys = Object.keys(config)\n    const invalidKeys = providedKeys.filter(key => !allowedKeys.includes(key))\n\n    if (invalidKeys.length > 0) {\n      throw new Error(`Invalid config keys: ${invalidKeys.join(', ')}`)\n    }\n  }\n}\n", "import type { AutofillInput } from './types/autofill.types'\nimport * as utils from './utils'\n\ninterface RandomConfig {\n  withPreset: boolean\n}\n\ninterface GenOptions {\n  chars?: string\n  min?: number\n  max?: number\n  len?: number\n}\n\ninterface Data {\n  [key: string]: string[] | object[]\n}\n\nexport default class Random {\n  private static data: Data = {\n    lastname: ['Kent', 'Doe', 'Bond'],\n    firstname: ['Clark', 'John', 'James'],\n    location: [\n      {\n        country: 'United States of America',\n        countryCode: '1',\n        iso: 'US/USA',\n        state: 'New York',\n        phoneNumber: '012-345-6789',\n        city: 'New York City',\n        zipCode: '10016',\n        street: '7985 E 38th St',\n        currency: 'US Dollar',\n        tld: 'us',\n      },\n      {\n        country: 'France',\n        countryCode: '33',\n        iso: 'FR/FRA',\n        state: 'Ile-de-France',\n        phoneNumber: '0123456789',\n        city: 'Paris',\n        zipCode: '75008',\n        street: '312 Av. des Champs-\u00C9lys\u00E9es',\n        currency: 'Euro',\n        tld: 'fr',\n      },\n      {\n        country: 'United Kingdom',\n        countryCode: 44,\n        iso: 'GB/GBR',\n        state: 'London',\n        phoneNumber: '02012347890',\n        city: 'London',\n        zipCode: '75008',\n        street: '1578 Willesden St',\n        currency: 'Pounds',\n        tld: 'uk',\n      },\n    ],\n    animal: ['Dog', 'Cat', 'Bird'],\n    colorString: ['Red', 'Green', 'Blue'],\n    colorHex: ['#ff0000', '#00ff00', '#0000ff'],\n    music: ['Classical', 'Electro', 'Blues'],\n    vehicle: ['Car', 'Bicycle', 'Truck'],\n    company: ['Test Inc.', '3W Corp', 'DevIn'],\n    search: ['search keyword 1', 'search keyword 2', 'search keyword 3'],\n  }\n\n  private static mapInputTypePreset: Record<string, string> = {\n    tel: 'phoneNumber',\n    email: 'email',\n    color: 'colorHex',\n    datetimeLocal: 'datetime',\n    time: 'time',\n    date: 'date',\n  }\n\n  private static mapInputTypeStringOption: Record<string, string> = {\n    text: 'string',\n    textarea: 'string',\n    email: 'email',\n    password: 'password',\n  }\n\n  public withPreset: boolean\n  public preset: Record<string, string> = {}\n\n  constructor({ withPreset }: RandomConfig) {\n    this.withPreset = withPreset\n    if (this.withPreset) {\n      this.initPreset()\n    }\n  }\n\n  public static parse(string: string): string | void {\n    const match = string.match(/^(\\w+)/)\n    if (match) {\n      const stringType = match[1]\n      const splitArgs = string.split('|')\n      const options: Record<string, string> = {}\n      if (splitArgs.length > 0) {\n        for (let i = 0; i < splitArgs.length; i++) {\n          const splitArg = splitArgs[i].split(':')\n          options[splitArg[0]] = splitArg[1]\n        }\n      }\n\n      return Random.gen(stringType, options)\n    }\n  }\n\n  public static gen(type: string, options: GenOptions): string {\n    const alphaLower = 'abcdefghijklmnopqrstuvwxyz'\n    const alphaUpper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    const alpha = alphaLower + alphaUpper\n    const digit = '0123456789'\n    const specialsChars = ' !\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\n    const allChars = alpha + digit + specialsChars\n\n    const stringTypes: Record<string, string> = {\n      string: alpha,\n      email: alphaLower,\n      password: allChars,\n      digit,\n    }\n\n    const minLength = options.min || 12\n    const maxLength = options.max || 16\n    const randomLength = Random.genInt(minLength, maxLength)\n\n    options.len = options.len || randomLength\n    options.chars = stringTypes[type]\n\n    let randomString = ''\n    if (type === 'email') {\n      randomString += Random.genEmail(options)\n    } else {\n      if (options.chars) {\n        randomString += Random.genString(options)\n      }\n    }\n\n    return randomString\n  }\n\n  public genInputValue(input: AutofillInput): string | number | boolean | number[] {\n    let inputValue\n    let type\n\n    if (input.getAttribute('list') ?? false) type = 'datalist'\n    else if (input.tagName === 'PROGRESS') type = 'progress'\n    else if (input.tagName === 'METER') type = 'meter'\n    else type = input.type\n\n    switch (type) {\n      case 'select-one':\n      case 'select-multiple':\n        inputValue = this.genSelect(input)\n        break\n\n      case 'checkbox':\n        inputValue = this.genCheckbox(input)\n        break\n\n      case 'radio':\n        inputValue = this.genRadio(input)\n        break\n\n      case 'datalist':\n        inputValue = this.genDatalist(input)\n        break\n\n      case 'range':\n        inputValue = this.genRange(input)\n        break\n\n      case 'number':\n        inputValue = this.genNumber(input)\n        break\n\n      case 'progress':\n        inputValue = this.genProgress(input)\n        break\n\n      case 'meter':\n        inputValue = this.genMeter(input)\n        break\n\n      case 'date':\n      case 'datetime-local':\n      case 'month':\n      case 'week':\n      case 'time':\n        inputValue = this.genDate(input, type)\n        break\n\n      case 'color':\n        inputValue = this.genColor()\n        break\n\n      default:\n        break\n    }\n\n    if (this.withPreset) {\n      const attributes = Random.getAttributesByKeyValue(input)\n      const preset = this.searchPreset({ type, ...attributes })\n\n      if (preset !== undefined) inputValue = preset\n    }\n\n    if (inputValue === undefined) {\n      const stringType = Random.mapInputTypeStringOption[type] ?? 'string'\n      const minlength = input.getAttribute('minlength')\n        ? Number.parseInt((input.getAttribute('minlength') as string))\n        : undefined\n      const maxlength = input.getAttribute('maxlength')\n        ? Number.parseInt((input.getAttribute('maxlength') as string))\n        : undefined\n\n      inputValue = Random.gen(stringType, { min: minlength, max: maxlength })\n    }\n\n    return inputValue\n  }\n\n  public static getData(): Data\n  {\n    return Random.data\n  }\n\n  private initPreset(): void {\n    this.preset = {}\n    for (const key in Random.data) {\n      if (key !== 'location') {\n        this.preset[key] = Random.getRandomItem(Random.data[key] as string[])\n      } else {\n        this.preset = { ...this.preset, ...Random.getRandomItem(Random.data.location as object[]) }\n      }\n    }\n\n    this.preset.name = this.preset.firstname\n    this.preset.fullname = `${this.preset.firstname} ${this.preset.lastname}`\n    this.preset.email = this.genPresetEmail()\n    this.preset.username = this.genPresetUsername()\n    this.preset.nickname = this.preset.username\n    this.preset.password = this.genPresetPassword()\n    this.preset.birthdate = this.genPresetBirthdate()\n    this.preset.age = this.genPresetAge()\n    this.preset.url = this.genPresetUrl()\n    this.preset.datetime = this.genPresetDatetime()\n    this.preset.date = this.genPresetDate()\n    this.preset.month = this.genPresetMonth()\n    this.preset.week = this.genPresetWeek()\n    this.preset.time = this.genPresetTime()\n  }\n\n  private genPresetEmail(): string {\n    // eslint-disable-next-line @stylistic/max-len\n    return `${this.preset.firstname.toLocaleLowerCase()}.${this.preset.lastname.toLocaleLowerCase()}@${this.preset.company.toLocaleLowerCase().replace(/\\W/g, '')}.${this.preset.tld}`\n  }\n\n  private genPresetUsername(): string {\n    return `${this.preset.firstname}_${this.preset.lastname}`.toLowerCase()\n  }\n\n  private genPresetPassword(): string {\n    const mapChars: Record<string, string> = {\n      a: '4', e: '3', g: '9', i: '1', l: '7', s: '5', z: '2',\n    }\n    const base = `${this.preset.username}_isnotasecurepwd`\n    const string = [...base].map(char => {\n      return mapChars[char] ?? char\n    }).map(char => {\n      return Random.genBool() ? char.toLocaleUpperCase() : char\n    }).join('')\n\n    return string\n  }\n\n  private genPresetAge(): string {\n    return (Math.floor(\n      (Date.now() - new Date(this.preset.birthdate).getTime()) / 3.155_76e+10)\n    ).toString()\n  }\n\n  private genPresetUrl(): string {\n    // eslint-disable-next-line @stylistic/max-len\n    return `https://www.${this.preset.company.toLocaleLowerCase().replace(/\\W/g, '')}.${this.preset.tld}`\n  }\n\n  private genPresetBirthdate(): string {\n    const date = new Date()\n    const years = date.getFullYear()\n    const randomYear = years - Random.genInt(21, 100)\n    const randomMonth = Random.genInt(0, 11)\n    const randomDay = Random.genInt(1, 31)\n    const birthdate = new Date(randomYear, randomMonth, randomDay).toISOString().split('T')[0]\n\n    return birthdate\n  }\n\n  private genPresetDatetime(): string {\n    return Random.getDatetime()\n  }\n\n  private genPresetDate(): string {\n    return Random.getDate(this.preset.datetime)\n  }\n\n  private genPresetMonth(): string {\n    return Random.getMonth(this.preset.datetime)\n  }\n\n  private genPresetWeek(): string {\n    return Random.getWeek(this.preset.datetime)\n  }\n\n  private genPresetTime(): string {\n    return Random.getTime(this.preset.datetime)\n  }\n\n  private searchPreset({ type, ...attrs }: { type: string, [key: string]: string }): string | void {\n    const camelType = utils.toCamelCase(type)\n\n    for (const pKey in this.preset) {\n      for (const aKey in attrs) {\n        const attrVal = attrs[aKey]\n        const reg = new RegExp(`^${attrVal}$`, 'i')\n        if (attrVal?.length > 0 && reg.test(pKey)) {\n          return this.preset[pKey]\n        }\n      }\n    }\n\n    const mappedType = Random.mapInputTypePreset[camelType]\n    if (mappedType) {\n      return this.preset[mappedType]\n    }\n  }\n\n  private genSelect(input: AutofillInput): number | number[] {\n    const selectType = input.type\n    const options = input.querySelectorAll('option')\n    const optionsIndexes = [...options]\n      .map((option, index) => option.value.length > 0 ? index : undefined)\n      .filter((index): index is number => index !== undefined)\n    const optionsIndexesCount = optionsIndexes.length\n    if (selectType === 'select-one') {\n      return optionsIndexes[Random.genInt(0, optionsIndexes.length - 1)]\n    } else {\n      const minOptionToSelect = Random.genInt(2, optionsIndexesCount)\n      let randomOptionsIndexes: number[] = []\n\n      while (randomOptionsIndexes.length < minOptionToSelect) {\n        const randomOptionIndex = optionsIndexes[Random.genInt(0, optionsIndexesCount - 1)]\n        if (!randomOptionsIndexes.includes(randomOptionIndex)) {\n          randomOptionsIndexes = [...randomOptionsIndexes, randomOptionIndex]\n        }\n      }\n\n      return randomOptionsIndexes\n    }\n  }\n\n  private genCheckbox(input: AutofillInput): boolean | number[] {\n    const reg = /\\[/g\n    const name = input.getAttribute('name')\n    if (name && reg.test(name)) {\n      const checkboxesIndexes = [\n        ...document.querySelectorAll(`input[name^=${name.split('[')[0]}\\\\[]`),\n      ].map((_, index) => index)\n\n      const minCheckboxToCheck = Random.genInt(1, checkboxesIndexes.length)\n      let randomCheckboxesIndexes: number[] = []\n\n      while (randomCheckboxesIndexes.length < minCheckboxToCheck) {\n        const randomCheckboxIndex = checkboxesIndexes[\n          Random.genInt(0, checkboxesIndexes.length - 1)\n        ]\n\n        if (!randomCheckboxesIndexes.includes(randomCheckboxIndex)) {\n          randomCheckboxesIndexes = [...randomCheckboxesIndexes, randomCheckboxIndex]\n        }\n      }\n\n      return randomCheckboxesIndexes\n    } else {\n      return Random.genBool()\n    }\n  }\n\n  private genRadio(input: AutofillInput): number | void {\n    const name = input.getAttribute('name') ?? ''\n    const radios = document.querySelectorAll(`[name^=${name.split('[')[0]}]`)\n    if (radios.length > 0) {\n      const radioIndexes = [...radios].map((_, index) => index)\n\n      return radioIndexes[Random.genInt(0, radioIndexes.length - 1)]\n    }\n  }\n\n  private genDatalist(input: AutofillInput): number | void {\n    const options = document.querySelectorAll(`datalist#${input.getAttribute('list')} option`)\n    if (options.length > 0) {\n      const optionsIndexes = [...options].map((_, index) => index)\n\n      return optionsIndexes[Random.genInt(0, optionsIndexes.length - 1)]\n    }\n  }\n\n  private genRange(input: AutofillInput): number {\n    const min = Number.parseInt(input.getAttribute('min') ?? '0')\n    const max = Number.parseInt(input.getAttribute('max') ?? '100')\n\n    return Random.genInt(min, max)\n  }\n\n  private genNumber(input: AutofillInput): number {\n    const min = Number.parseInt(input.getAttribute('min') ?? '-1000')\n    const max = Number.parseInt(input.getAttribute('max') ?? '1000')\n\n    return Random.genInt(min, max)\n  }\n\n  private genProgress(input: AutofillInput): number {\n    const max = Number.parseInt(input.getAttribute('max') ?? '100')\n\n    return Random.genInt(0, max)\n  }\n\n  private genMeter(input: AutofillInput): number {\n    return this.genNumber(input)\n  }\n\n  private genDate(input: AutofillInput, type = 'date'): string | undefined {\n    const start = input.getAttribute('min') ?? '1970-01-01'\n    const end = input.getAttribute('max') ?? '2099-12-31'\n    let date\n\n    switch (type) {\n      case 'datetime-local':\n        date = Random.genDatetime(start, end)\n        break\n      case 'month':\n        date = Random.genMonth(start, end)\n        break\n      case 'week':\n        date = Random.genWeek(start, end)\n        break\n      case 'time':\n        date = Random.genTime(start, end)\n        break\n      case 'date':\n        date = Random.genDate(start, end)\n        break\n    }\n\n    return date\n  }\n\n  private genColor(): string {\n    return `#${Math.floor(Math.random() * 16_777_215).toString(16).padStart(6, '0')}`\n  }\n\n  private static genEmail(options: GenOptions): string {\n    const length = options?.len !== undefined && options.len >= 5\n      ? options.len\n      : 5\n\n    const tldLength = 2\n    const domainLength = Math.floor(length / 3)\n    const usernameLength = length - domainLength + tldLength\n\n    let randomString = ''\n\n    randomString += Random.genString({ ...options, len: usernameLength })\n    randomString += '@'\n    randomString += Random.genString({ ...options, len: domainLength })\n    randomString += '.'\n    randomString += Random.genString({ ...options, len: tldLength })\n\n    return randomString\n  }\n\n  private static genString(options: GenOptions): string {\n    const chars = options.chars as string\n    const length = options.len ?? 0\n\n    let randomString = ''\n\n    for (let i = 0; i < length; i++) {\n      randomString += chars[Math.floor(Math.random() * chars.length)]\n    }\n\n    return randomString\n  }\n\n  private static getAttributesByKeyValue(input: AutofillInput): Record<string, string> {\n    const attrNames = ['name', 'id', 'class']\n\n    const attributesByKV = attrNames.reduce((acc: Record<string, string>, key) => {\n      const attrValue = input.getAttribute(key)\n      if (attrValue !== null) {\n        acc[key] = attrValue\n      }\n\n      return acc\n    }, {})\n\n    return attributesByKV\n  }\n\n  private static genInt(min: number, max: number): number {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n  }\n\n  private static genBool(): boolean {\n    return Math.random() < 0.5\n  }\n\n  private static genDateBetween(start: string, end: string): Date {\n    const startDate = new Date(start)\n    const endDate = new Date(end)\n\n    return new Date(startDate.getTime() + Math.random() * (endDate.getTime() - startDate.getTime()))\n  }\n\n  private static genDate(start: string, end: string): string {\n    const date = Random.genDateBetween(start, end)\n    const dateFormat = Random.getDate(Random.getDatetime(date))\n\n    return dateFormat\n  }\n\n  private static genDatetime(start: string, end: string): string {\n    const date = Random.genDateBetween(start, end)\n\n    return Random.getDatetime(date)\n  }\n\n  private static genMonth(start: string, end: string): string {\n    return Random.getMonth(Random.genDate(start, end))\n  }\n\n  private static genWeek(start: string, end: string): string {\n    return Random.getWeek(Random.genDate(start, end))\n  }\n\n  private static genTime(start: string, end: string): string {\n    return Random.getTime(Random.genDatetime(start, end))\n  }\n\n  private static getDatetime(date?: Date): string {\n    if (date === undefined) {\n      date = new Date()\n    }\n\n    const datetime = date.toISOString().split('.')[0]\n\n    return datetime\n  }\n\n  private static getDate(datetime: string): string {\n    return datetime.split('T')[0]\n  }\n\n  private static getMonth(datetime: string): string {\n    const date = new Date(datetime)\n\n    return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}`\n  }\n\n  private static getWeek(datetime: string): string {\n    const date = new Date(datetime)\n\n    return `${date.getFullYear()}-W${Random.getWeekNumber(date).toString().padStart(2, '0')}`\n  }\n\n  private static getTime(datetime: string): string {\n    return datetime.split('T')[1]\n  }\n\n  private static getWeekNumber(date: Date): string {\n    const startDate = new Date(date.getFullYear(), 0, 1)\n    const days = Math.floor((date.getTime() - startDate.getTime()) / (24 * 60 * 60 * 1000))\n    const weekNumber = Math.ceil(days / 7)\n\n    return weekNumber.toString()\n  }\n\n  private static getRandomItem<T>(array: T[]): T {\n    return array[Math.floor(Math.random() * array.length)]\n  }\n}\n", "import type { AutofillInput } from './types/autofill.types'\n\ninterface SyntheticEvent {\n  target: Element\n  currentTarget: Element\n  type: string\n  bubbles: boolean\n  preventDefault: () => void\n  stopPropagation: () => void\n}\n\ntype ReactEventHandler = (event: SyntheticEvent) => void\n\ntype Element = AutofillInput | HTMLOptionElement | HTMLFormElement\n\ninterface ReactProps {\n  onChange?: ReactEventHandler\n  onInput?: ReactEventHandler\n  onSubmit?: ReactEventHandler\n  [key: string]: any\n}\n\ninterface ReactElement {\n  [key: string]: ReactProps | any\n}\n\nconst isReact15 = (key: string): boolean => key.startsWith('__reactInternalInstance$')\nconst isReact16 = (key: string): boolean =>\n  key.startsWith('__reactProps$') || key.startsWith('__reactEventHandlers$')\n\nconst reactMap: Record<string, string> = {\n  change: 'onChange',\n  input: 'onInput',\n  submit: 'onSubmit',\n}\n\nconst reactPropKey = (\n  input: Element,\n): string | undefined => {\n  const react16Key = Object.keys(input as ReactElement).find(key => isReact16(key))\n\n  if (react16Key) return react16Key\n\n  const react15Key = Object.keys(input as ReactElement).find(key => isReact15(key))\n\n  return react15Key\n}\n\nconst getReact15EventHandlers = (\n  input: Element,\n  propKey: string,\n): ReactProps | undefined => {\n  try {\n    const internalInstance = (input as ReactElement)[propKey]\n\n    if (\n      internalInstance\n      && internalInstance._currentElement\n      && internalInstance._currentElement.props\n    ) {\n      return internalInstance._currentElement.props\n    }\n\n    return undefined\n  } catch {\n    return undefined\n  }\n}\n\nconst fireDefault = (\n  input: Element,\n  eventName: string,\n  options: Record<string, boolean>,\n): void => {\n  input.dispatchEvent(new Event(eventName, options))\n}\n\nconst fireReact = (input: Element, eventName: string): void => {\n  const rPropKey = reactPropKey(input)\n  const mappedEventName = reactMap[eventName]\n\n  if (!rPropKey || !mappedEventName) return\n\n  const syntheticEvent: SyntheticEvent = {\n    target: input,\n    currentTarget: input,\n    type: eventName,\n    bubbles: true,\n    preventDefault: () => {},\n    stopPropagation: () => {},\n  }\n\n  if (isReact16(rPropKey)) {\n    if (\n      (input as ReactElement)[rPropKey]\n      && (input as ReactElement)[rPropKey][mappedEventName]\n    ) {\n      (input as ReactElement)[rPropKey][mappedEventName](syntheticEvent)\n    }\n  } else if (isReact15(rPropKey)) {\n    const props = getReact15EventHandlers(input, rPropKey)\n    if (props && props[mappedEventName]) {\n      props[mappedEventName](syntheticEvent)\n    }\n  }\n}\n\nexport const fireEvent = (\n  input: Element,\n  eventName: string,\n  options?: Record<string, boolean>,\n): void => {\n  const isReactInput = reactPropKey(input) !== undefined\n  options = { cancelable: true, bubbles: false, ...options }\n\n  if (!isReactInput) {\n    fireDefault(input, eventName, options)\n  } else {\n    fireReact(input, eventName)\n  }\n}\n", "import { ConfigManager } from '../config-manager'\nimport Random from '../random'\nimport { fireEvent } from '../event'\n\nimport {\n  AutofillConfig,\n  AutofillInput,\n  AutofillInputsOptions,\n  AutofillOptions,\n} from '../types/autofill.types'\nimport * as utils from '../utils'\n\nexport class InputHandler {\n  public config: AutofillConfig\n\n  constructor(\n    protected input: AutofillInput,\n    private configManager: ConfigManager,\n    private randomInstance: Random,\n    formConfig: AutofillConfig,\n    protected formSelector?: string,\n  ) {\n    const identifier = this.getInputIdentifier(input, formConfig)\n    this.config = this.configManager.getInputConfig(formSelector, identifier)\n  }\n\n  protected generateInputValue(\n    input: AutofillInput,\n    config: AutofillConfig,\n  ): unknown {\n    let value\n\n    if (this.configManager.hasFormWithInputs(this.formSelector)) {\n      const identifier = this.getInputIdentifier(input, config)\n\n      if (identifier) {\n        value = this.getInputValue(identifier, this.formSelector)\n\n        const generationTemplate = this.needsGeneration(value, config)\n        if (generationTemplate) {\n          value = Random.parse(generationTemplate)\n        }\n      } else if (config.random) {\n        value = this.randomInstance?.genInputValue(input)\n      }\n    } else {\n      value = this.randomInstance?.genInputValue(input)\n    }\n\n    return this.validateValueConstraints(input, value, config)\n  }\n\n  protected setInputProperty(\n    input: AutofillInput | HTMLOptionElement,\n    property: { key: 'selected' | 'checked' | 'value' | 'files', value: unknown },\n    config: AutofillConfig,\n  ): void {\n    this.setProperty(input, property, config)\n\n    config.events.forEach(eventName => fireEvent(input, eventName))\n  }\n\n  private needsGeneration(value: unknown, config: AutofillConfig): false | string {\n    if (!config.generate || typeof value !== 'string') return false\n\n    const generationPattern = /{{\\s(.+?)\\s}}/\n    const match = value.match(generationPattern)\n\n    return match && match[1] ? match[1] : false\n  }\n\n  private validateValueConstraints(\n    input: AutofillInput,\n    value: unknown,\n    config: AutofillConfig,\n  ): unknown {\n    if (typeof value !== 'string') return value\n\n    if (config.validateInputAttributes.includes('minlength')) {\n      const minlength = Number.parseInt(input?.getAttribute('minlength') || '-1', 10)\n      if (minlength > 0 && value.length < minlength) {\n        value += Random.gen('string', { len: minlength - value.length })\n      }\n    }\n\n    if (config.validateInputAttributes.includes('maxlength')) {\n      const maxlength = Number.parseInt(input.getAttribute('maxlength') || '-1', 10)\n      if (maxlength > 0 && value.length > maxlength) {\n        value = utils.truncate(value, maxlength)\n      }\n    }\n\n    return value\n  }\n\n  private getInputValue(identifier: string, formSelector: string): unknown {\n    if (!this.configManager.hasFormWithInputs(formSelector) || !identifier) {\n      return undefined\n    }\n    const inputs = this.configManager.forms[formSelector].inputs as AutofillInputsOptions\n    const input = inputs[identifier]\n\n    if (utils.isObject(input) && utils.hasProp(input as object, 'value')) {\n      return input.value\n    }\n\n    return input\n  }\n\n  private getInputIdentifier(\n    input: AutofillInput,\n    config: AutofillOptions,\n  ): string | undefined {\n    const { inputAttributes } = config\n\n    if (!inputAttributes || !this.formSelector) return undefined\n\n    for (const attrName of inputAttributes) {\n      const attrValue = input.getAttribute(attrName)\n      if (!attrValue) continue\n\n      const baseKey = attrValue.split('[')[0]\n\n      if (this.getInputValue(baseKey, this.formSelector) !== undefined) {\n        return baseKey\n      }\n\n      if (config.camelize) {\n        const camelKey = utils.toCamelCase(baseKey)\n        if (this.getInputValue(camelKey, this.formSelector) !== undefined) {\n          return camelKey\n        }\n      }\n    }\n\n    return undefined\n  }\n\n  private setProperty = (\n    input: AutofillInput | HTMLOptionElement,\n    property: { key: 'selected' | 'checked' | 'value' | 'files', value: unknown },\n    config: AutofillConfig,\n  ): void => {\n    const { key, value } = property\n\n    switch (key) {\n      case 'selected':\n        if ('selected' in input) {\n          (input as HTMLOptionElement).selected = Boolean(value)\n        }\n        break\n\n      case 'checked':\n        if ('checked' in input) {\n          (input as HTMLInputElement).checked = Boolean(value)\n        }\n        break\n\n      case 'files':\n        if ('files' in input) {\n          (input as HTMLInputElement).files = value as FileList\n        }\n        break\n\n      case 'value':\n        if ('value' in input) {\n          input.value = String(value === null ? '' : value)\n          if (config.valueAttribute) input.setAttribute('value', input.value)\n        }\n        break\n    }\n  }\n}\n", "import { InputHandler } from './handler'\n\nexport class TextInputHandler extends InputHandler {\n  public handle(): void {\n    const input = this.input\n    const config = this.config\n    const shouldFill = this.config.override\n      || !input.value?.length\n      || (input.type === 'range' && input.value === '50')\n      || (input.type === 'color' && input.value === '#000000')\n\n    if (!shouldFill) return\n\n    const value = this.generateInputValue(input, config)\n\n    if (value !== undefined) {\n      this.setInputProperty(input, { key: 'value', value }, config)\n    }\n  }\n}\n", "import { InputHandler } from './handler'\nimport { asArray } from '../utils'\n\nexport class SelectInputHandler extends InputHandler {\n  public handle(): void {\n    const input = this.input\n    const config = this.config\n    const options = [...input.querySelectorAll('option')]\n\n    if (!config.override && options.some(option => option.selected)) {\n      return\n    }\n\n    const values = asArray(this.generateInputValue(input, config))\n\n    values.forEach((value) => {\n      if (typeof value === 'string') {\n        const option = options.find(option => option.value === value)\n        if (option) {\n          this.setInputProperty(option, { key: 'selected', value: true }, config)\n        }\n      } else if (typeof value === 'number' && value >= 0 && value < options.length) {\n        this.setInputProperty(options[value], { key: 'selected', value: true }, config)\n      }\n    })\n  }\n}\n", "import { InputHandler } from './handler'\n\nexport class FileInputHandler extends InputHandler {\n  public handle(): void {\n    const input = this.input\n    const config = this.config\n    const file = new File(['file content'], 'test.txt', { type: 'text/plain' })\n    const dataTransfer = new DataTransfer()\n    dataTransfer.items.add(file)\n\n    this.setInputProperty(input, { key: 'files', value: dataTransfer.files }, config)\n  }\n}\n", "import { InputHandler } from './handler'\nimport { asArray } from '../utils'\n\nexport class CheckboxRadioInputHandler extends InputHandler {\n  public handle(\n    group: HTMLInputElement[],\n  ): void {\n    const config = this.config\n    const input = group[0]\n\n    if (!config.override) {\n      const anyChecked = group.some(input => input.checked)\n      if (anyChecked) return\n    }\n\n    const values = asArray(this.generateInputValue(input, config))\n\n    values.forEach((value, valueIndex) => {\n      group.forEach((input, inputIndex) => {\n        let shouldCheck = false\n\n        if (typeof value === 'string' && input.value === value) {\n          shouldCheck = true\n        } else if (typeof value === 'number' && inputIndex === value) {\n          shouldCheck = true\n        } else if (typeof value === 'boolean' && inputIndex === valueIndex) {\n          shouldCheck = value\n        }\n\n        if (shouldCheck) {\n          this.setInputProperty(input, { key: 'checked', value: true }, config)\n        }\n      })\n    })\n  }\n}\n", "import { InputHandler } from './handler'\n\nexport class DatalistInputHandler extends InputHandler {\n  public handle(): void {\n    const input = this.input\n    const config = this.config\n\n    if (!config.override && input.value.length > 0) {\n      return\n    }\n\n    const value = this.generateInputValue(input, config)\n\n    if (typeof value === 'string') {\n      this.setInputProperty(input, { key: 'value', value }, config)\n    } else if (typeof value === 'number') {\n      const listId = input.getAttribute('list')\n      if (!listId) return\n\n      const options = document.querySelectorAll(`datalist#${listId} option`)\n      if (options.length > value) {\n        this.setInputProperty(\n          input,\n          { key: 'value', value: (options[value] as HTMLOptionElement).value },\n          config,\n        )\n      }\n    }\n  }\n}\n", "import * as utils from './utils'\n\nimport type { AutofillConfig, AutofillInput } from './types/autofill.types'\nimport { ConfigManager } from './config-manager'\nimport Random from './random'\nimport { TextInputHandler } from './handlers/text-handler'\nimport { SelectInputHandler } from './handlers/select-handler'\nimport { FileInputHandler } from './handlers/file-handler'\nimport { CheckboxRadioInputHandler } from './handlers/checkbox-radio-handler'\nimport { DatalistInputHandler } from './handlers/datalist-handler'\nimport { fireEvent } from './event'\n\nexport class FormProcessor {\n  public formSelector?: string\n  public config: AutofillConfig\n  public randomInstance: Random\n\n  constructor(\n    private configManager: ConfigManager,\n    private form: HTMLFormElement | null,\n  ) {\n    this.formSelector = this.configManager.findFormSelector(this.form)\n    this.config = this.configManager.getFormConfig(this.formSelector)\n\n    this.randomInstance = new Random({\n      withPreset: this.config.random ? this.config.randomPreset : true,\n    })\n  }\n\n  public process(inputs: AutofillInput[]): void\n  {\n    const filteredInputs = this.filterInputs(inputs, this.config)\n\n    this.processAllInputs(filteredInputs, this.config, this.formSelector)\n\n    if (this.config?.autosubmit && this.form !== null) {\n      this.submitForm(this.form)\n    }\n  }\n\n  private filterInputs(inputs: AutofillInput[], config: AutofillConfig): AutofillInput[] {\n    return inputs.filter(input =>\n      utils.notContainsAttributes(input, config.inputAttributesSkip)\n      && utils.notContainsTypes(input, config.inputTypesSkip),\n    )\n  }\n\n  private submitForm(form: HTMLFormElement, timeout = 1000): void {\n    setTimeout(() => fireEvent(form, 'submit'), timeout)\n  }\n\n  private processAllInputs(\n    inputs: AutofillInput[],\n    config: AutofillConfig,\n    formSelector?: string,\n  ): void {\n    const configManager = this.configManager\n    const randomInstance = this.randomInstance\n    this.getDefaultInputs(inputs).forEach(input => {\n      new TextInputHandler(\n        input, configManager, randomInstance, config, formSelector,\n      ).handle()\n    })\n\n    this.getSelects(inputs).forEach(input => {\n      new SelectInputHandler(\n        input, configManager, randomInstance, config, formSelector,\n      ).handle()\n    })\n\n    this.getCheckboxesGroup(inputs).forEach(group => {\n      new CheckboxRadioInputHandler(\n        /* @todo rewrite */group[0], configManager, randomInstance, config, formSelector,\n      ).handle(group)\n    })\n\n    this.getRadios(inputs).forEach(group => {\n      new CheckboxRadioInputHandler(\n        group[0], configManager, randomInstance, config, formSelector,\n      ).handle(group)\n    })\n\n    this.getDatalists(inputs).forEach(input => {\n      new DatalistInputHandler(\n        input, configManager, randomInstance, config, formSelector,\n      ).handle()\n    })\n\n    this.getFileInputs(inputs).forEach(input => {\n      new FileInputHandler(\n        input, configManager, randomInstance, config, formSelector,\n      ).handle()\n    })\n  }\n\n  private getDefaultInputs(inputs: AutofillInput[]): (HTMLInputElement | HTMLTextAreaElement)[] {\n    const excludedInputTypes = ['checkbox', 'radio', 'file', 'reset', 'submit', 'button']\n    const excludedAttributes = ['list']\n\n    return inputs.filter((input): input is (HTMLInputElement | HTMLTextAreaElement) => {\n      return utils.notContainsTypes(input, excludedInputTypes)\n        && utils.notContainsAttributes(input, excludedAttributes)\n    })\n  }\n\n  private getFileInputs(inputs: AutofillInput[]): HTMLInputElement[] {\n    return inputs.filter((input): input is HTMLInputElement => input.type === 'file')\n  }\n\n  private getCheckboxesGroup(inputs: AutofillInput[]): HTMLInputElement[][] {\n    const nameGroupPattern = /(.+)\\[/\n    const checkboxGroups: HTMLInputElement[][] = []\n    const processedInputs = new Set()\n\n    for (const input of inputs) {\n      if (input.type !== 'checkbox' || processedInputs.has(input)) continue\n\n      const inputName = input.getAttribute('name')\n      const nameMatch = inputName?.match(nameGroupPattern)\n\n      if (nameMatch) {\n        const groupNamePrefix = nameMatch[1]\n        const groupNameRegex = new RegExp(`^${groupNamePrefix}\\\\[`)\n\n        const checkboxGroup = inputs.filter(\n          (input): input is HTMLInputElement =>\n            input.type === 'checkbox'\n            && groupNameRegex.test(input?.getAttribute('name') || ''),\n        )\n\n        if (checkboxGroup.length > 0) {\n          checkboxGroups.push(checkboxGroup)\n          checkboxGroup.forEach(input => processedInputs.add(input))\n        }\n      } else {\n        checkboxGroups.push([input as HTMLInputElement])\n        processedInputs.add(input)\n      }\n    }\n\n    return checkboxGroups\n  }\n\n  private getSelects(inputs: AutofillInput[]): HTMLSelectElement[] {\n    return inputs.filter(\n      (input): input is HTMLSelectElement =>\n        input.type === 'select-one' || input.type === 'select-multiple',\n    )\n  }\n\n  private getDatalists(inputs: AutofillInput[]): HTMLInputElement[] {\n    return inputs.filter(\n      (input): input is HTMLInputElement => input.getAttribute('list') !== null,\n    )\n  }\n\n  private getRadios(inputs: AutofillInput[]): HTMLInputElement[][] {\n    const radioGroups: HTMLInputElement[][] = []\n    const processedNames = new Set<string>()\n\n    for (const input of inputs) {\n      if (input.type !== 'radio') continue\n\n      const name = input.getAttribute('name')\n      if (!name || processedNames.has(name)) continue\n\n      const radioGroup = inputs.filter(\n        (input): input is HTMLInputElement =>\n          input.type === 'radio' && input.getAttribute('name') === name,\n      )\n\n      if (radioGroup.length > 0) {\n        radioGroups.push(radioGroup)\n        processedNames.add(name)\n      }\n    }\n\n    return radioGroups\n  }\n}\n", "import * as utils from './utils'\nimport Random from './random'\nimport Overlay from './overlay'\nimport { ConfigManager } from './config-manager'\nimport type {\n  AutofillOptions,\n  AutofillDomForm,\n  AutofillInfos,\n} from './types/autofill.types'\nimport { FormProcessor } from './form-processor'\n\ndeclare global {\n  interface Window {\n    autofill?: (options?: AutofillOptions) => Promise<Autofill>\n  }\n}\n\nexport class Autofill {\n  public configManager: ConfigManager\n  public domForms: AutofillDomForm[] = []\n  public randomInstance?: Random\n\n  constructor(public readonly options?: AutofillOptions) {\n    this.configManager = new ConfigManager(options)\n  }\n\n  public get infos(): AutofillInfos {\n    return this.configManager.infos\n  }\n\n  public async init(): Promise<Autofill> {\n    if (!this.configManager.isEnabled) {\n      console.warn('Autofill.js is disabled')\n\n      return this\n    }\n\n    const { url } = this.configManager.config\n    if (typeof url === 'string' && utils.isValidUrl(url)) {\n      await this.configManager.loadFromUrl(url)\n    }\n\n    this.initDomForms()\n    this.fill()\n\n    if (this.configManager.config.overlay) {\n      new Overlay(\n        this,\n        this.configManager,\n        this.domForms,\n      ).init()\n    }\n\n    return this\n  }\n\n  private initDomForms(): void {\n    const { inputsSelectors } = this.configManager.config\n    if (!inputsSelectors) return\n\n    const selector = inputsSelectors.join(',')\n    const domInputs: NodeListOf<HTMLInputElement> = document.querySelectorAll(selector)\n    this.domForms = []\n\n    domInputs.forEach(input => {\n      const form = input.closest('form')\n      const existingDomForm = this.domForms.find(domForm => domForm.form === form)\n\n      if (existingDomForm) {\n        existingDomForm.inputs.push(input)\n      } else {\n        this.domForms.push({ form, inputs: [input] })\n      }\n    })\n  }\n\n  private processForm(domForm: AutofillDomForm): void {\n    const { form, inputs } = domForm\n    const formProcessor = new FormProcessor(this.configManager, form)\n    formProcessor.process(inputs)\n  }\n\n  public fill(): void {\n    if (this.domForms.length === 0) {\n      console.log('No input found in the HTML DOM')\n\n      return\n    }\n\n    this.domForms.forEach(domForm => this.processForm(domForm))\n  }\n}\n\nexport const autofill = (options?: AutofillOptions): Promise<Autofill> => {\n  return new Promise(resolve => {\n    const instance = new Autofill(options)\n\n    if (document.readyState === 'complete') {\n      resolve(instance.init())\n    } else {\n      window.addEventListener('load', () => {\n        resolve(instance.init())\n      })\n    }\n  })\n}\n\nwindow.autofill = autofill\n"],
  "mappings": "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",
  "names": ["autofill", "target", "option", "input", "input"]
}
