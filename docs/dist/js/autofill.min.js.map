{
  "version": 3,
  "sources": ["../../src/js/overlay.js", "../../src/js/utils.js", "../../src/js/random.js", "../../src/js/autofill.js"],
  "sourcesContent": ["", "export function hasProp (name, obj) {\n  return Object.prototype.hasOwnProperty.call(obj, name)\n}\n\nexport function asArray (item) {\n  return Array.isArray(item) ? item : [item]\n}\n\nexport function itemExists (item, array) {\n  for (let i = 0; i < array.length; i++) {\n    const element = array[i]\n    if (item === element) {\n      return true\n    } else if (Array.isArray(element) && itemExists(item, element)) {\n      return true\n    }\n  }\n\n  return false\n}\n\nexport function truncate (string, length) {\n  return string.slice(0, Math.max(0, length))\n}\n\nexport function toCamelCase (string) {\n  if (typeof string !== 'undefined') {\n    const split = string.split('-').length > 1 ? string.split('-') : string.split('_')\n\n    return split.map((item, index) => {\n      if (index > 0) {\n        item = item.charAt(0).toUpperCase() + item.slice(1)\n      }\n\n      return item\n    }).join('')\n  }\n\n  return string\n}\n\nexport function toKebabCase (string) {\n  if (typeof string !== 'undefined') {\n    return string\n      .match(/[A-Z]{2,}(?=[A-Z][a-z]+\\d*|\\b)|[A-Z]?[a-z]+\\d*|[A-Z]|\\d+/g)\n      .map(x => x.toLowerCase())\n      .join('-')\n  }\n\n  return string\n}\n\nexport function toSnakeCase (string) {\n  if (typeof string !== 'undefined') {\n    return string\n      .match(/[A-Z]{2,}(?=[A-Z][a-z]+\\d*|\\b)|[A-Z]?[a-z]+\\d*|[A-Z]|\\d+/g)\n      .map(x => x.toLowerCase())\n      .join('_')\n  }\n}\n\nexport function stringToArr (string, separator) {\n  return string.split(`${separator}`).map(item => item.trim())\n}\n\nexport function notContainsAttributes (element, attributes) {\n  const excludedAttributes = new Set(attributes)\n\n  return element.getAttributeNames().every(attr => {\n    return !excludedAttributes.has(attr)\n  })\n}\n\nexport function notContainsTypes (input, types) {\n  return !types.includes(input.type)\n}\n", "import * as utils from './utils.js'\n\nexport default class Random {\n  static data = {\n    lastname: ['Kent', 'Doe', 'Bond'],\n    firstname: ['Clark', 'John', 'James'],\n    location: [\n      {\n        country: 'United States of America',\n        countryCode: 1,\n        iso: 'US/USA',\n        state: 'New York',\n        phoneNumber: '012-345-6789',\n        city: 'New York City',\n        zipCode: '10016',\n        street: '7985 E 38th St',\n        currency: 'US Dollar',\n        tld: 'us'\n      },\n      {\n        country: 'France',\n        countryCode: 33,\n        iso: 'FR/FRA',\n        state: 'Ile-de-France',\n        phoneNumber: '0123456789',\n        city: 'Paris',\n        zipCode: '75008',\n        street: '312 Av. des Champs-\u00C9lys\u00E9es',\n        currency: 'Euro',\n        tld: 'fr'\n      },\n      {\n        country: 'United Kingdom',\n        countryCode: 44,\n        iso: 'GB/GBR',\n        state: 'London',\n        phoneNumber: '02012347890',\n        city: 'London',\n        zipCode: '75008',\n        street: '1578 Willesden St',\n        currency: 'Pounds',\n        tld: 'uk'\n      }\n    ],\n    animal: ['Dog', 'Cat', 'Bird'],\n    colorString: ['Red', 'Green', 'Blue'],\n    colorHex: ['#ff0000', '#00ff00', '#0000ff'],\n    music: ['Classical', 'Electro', 'Blues'],\n    vehicle: ['Car', 'Bicycle', 'Truck'],\n    company: ['Test Inc.', '3W Corp', 'DevIn'],\n    search: ['search keyword 1', 'search keyword 2', 'search keyword 3']\n  }\n\n  static mapInputTypePreset = {\n    tel: 'phoneNumber',\n    email: 'email',\n    color: 'colorHex',\n    datetimeLocal: 'datetime',\n    time: 'time',\n    date: 'date'\n  }\n\n  static mapInputTypeStringOption = {\n    text: 'string',\n    textarea: 'string',\n    email: 'email',\n    password: 'password'\n  }\n\n  constructor ({ withPreset }) {\n    this.withPreset = withPreset\n    if (this.withPreset) {\n      this.initPreset()\n    }\n  }\n\n  initPreset () {\n    this.preset = {}\n    for (const key in Random.data) {\n      if (key !== 'location') {\n        this.preset[key] = Random.getRandomItem(Random.data[key])\n      } else {\n        this.preset = { ...this.preset, ...Random.getRandomItem(Random.data.location) }\n      }\n    }\n\n    this.preset.name = this.preset.firstname\n    this.preset.fullname = `${this.preset.firstname} ${this.preset.lastname}`\n    this.preset.email = this.genPresetEmail()\n    this.preset.username = this.genPresetUsername()\n    this.preset.nickname = this.preset.username\n    this.preset.password = this.genPresetPassword()\n    this.preset.birthdate = this.genPresetBirthdate()\n    this.preset.age = this.genPresetAge()\n    this.preset.url = this.genPresetUrl()\n    this.preset.datetime = this.genPresetDatetime()\n    this.preset.date = this.genPresetDate()\n    this.preset.month = this.genPresetMonth()\n    this.preset.week = this.genPresetWeek()\n    this.preset.time = this.genPresetTime()\n  }\n\n  genPresetEmail () {\n    return `${this.preset.firstname.toLocaleLowerCase()}.${this.preset.lastname.toLocaleLowerCase()}@${this.preset.company.toLocaleLowerCase().replace(/\\W/g, '')}.${this.preset.tld}`\n  }\n\n  genPresetUsername () {\n    return `${this.preset.firstname}_${this.preset.lastname}`.toLowerCase()\n  }\n\n  genPresetPassword () {\n    const mapChars = {\n      a: '4', e: '3', g: '9', i: '1', l: '7', s: '5', z: '2'\n    }\n    const base = `${this.preset.username}_isnotasecurepwd`\n    const string = [...base].map(char => {\n      return mapChars[char] ?? char\n    }).map(char => {\n      return Random.genBool() ? char.toLocaleUpperCase() : char\n    }).join('')\n\n    return string\n  }\n\n  genPresetAge () {\n    return Math.floor((Date.now() - new Date(this.preset.birthdate).getTime()) / 3.155_76e+10)\n  }\n\n  genPresetUrl () {\n    return `https://www.${this.preset.company.toLocaleLowerCase().replace(/\\W/g, '')}.${this.preset.tld}`\n  }\n\n  genPresetBirthdate () {\n    const date = new Date()\n    const years = date.getFullYear()\n    const randomYear = years - Random.genInt(21, 100)\n    const randomMonth = Random.genInt(0, 11)\n    const randomDay = Random.genInt(1, 31)\n    const birthdate = new Date(randomYear, randomMonth, randomDay).toISOString().split('T')[0]\n\n    return birthdate\n  }\n\n  genPresetDatetime () {\n    return Random.getDatetime()\n  }\n\n  genPresetDate () {\n    return Random.getDate(this.preset.datetime)\n  }\n\n  genPresetMonth () {\n    return Random.getMonth(this.preset.datetime)\n  }\n\n  genPresetWeek () {\n    return Random.getWeek(this.preset.datetime)\n  }\n\n  genPresetTime () {\n    return Random.getTime(this.preset.datetime)\n  }\n\n  searchPreset ({ type, ...attrs }) {\n    const camelType = utils.toCamelCase(type)\n\n    for (const pKey in this.preset) {\n      for (const aKey in attrs) {\n        const attrVal = attrs[aKey]\n        const reg = new RegExp(`^${attrVal}$`, 'i')\n        if (attrVal?.length > 0 && reg.test(pKey)) {\n          return this.preset[pKey]\n        }\n      }\n    }\n\n    if (Random.mapInputTypePreset[camelType]) {\n      return this.preset[Random.mapInputTypePreset[camelType]]\n    }\n  }\n\n  genInputValue (input) {\n    let inputValue\n    let type\n    if (input.getAttribute('list')?.length > 0) type = 'datalist'\n    else if (input.tagName === 'PROGRESS') type = 'progress'\n    else if (input.tagName === 'METER') type = 'meter'\n    else type = input.type\n\n    const stringType = Random.mapInputTypeStringOption[type] ?? 'string'\n\n    switch (type) {\n      case 'select-one':\n      case 'select-multiple':\n        inputValue = this.genSelect(input)\n        break\n\n      case 'checkbox':\n        inputValue = this.genCheckbox(input)\n        break\n\n      case 'radio':\n        inputValue = this.genRadio(input)\n        break\n\n      case 'datalist':\n        inputValue = this.genDatalist(input)\n        break\n\n      case 'range':\n        inputValue = this.genRange(input)\n        break\n\n      case 'number':\n        inputValue = this.genNumber(input)\n        break\n\n      case 'progress':\n        inputValue = this.genProgress(input)\n        break\n\n      case 'meter':\n        inputValue = this.genMeter(input)\n        break\n\n      case 'date':\n      case 'datetime-local':\n      case 'month':\n      case 'week':\n      case 'time':\n        inputValue = this.genDate(input, type)\n        break\n\n      case 'color':\n        inputValue = this.genColor()\n        break\n\n      default:\n        break\n    }\n\n    if (this.withPreset) {\n      const attributes = Random.getAttributesByKeyValue(input)\n      const preset = this.searchPreset({ type, ...attributes })\n\n      if (typeof preset !== 'undefined') inputValue = preset\n    }\n\n    if (typeof inputValue === 'undefined') {\n      const minlength = input.getAttribute('minlength') ? Number.parseInt(input.getAttribute('minlength')) : false\n      const maxlength = input.getAttribute('maxlength') ? Number.parseInt(input.getAttribute('maxlength')) : false\n\n      inputValue = Random.gen(stringType, { min: minlength, max: maxlength })\n    }\n\n    return inputValue\n  }\n\n  genSelect (input) {\n    const selectType = input.type\n    const options = input.querySelectorAll('option')\n    const optionsIndexes = [...options]\n      .map((option, index) => option.value.length > 0 ? index : false)\n      .filter(Boolean)\n    const optionsIndexesCount = optionsIndexes.length\n\n    if (selectType === 'select-one') {\n      return optionsIndexes[Random.genInt(0, optionsIndexes.length - 1)]\n    } else {\n      const minOptionToSelect = Random.genInt(2, optionsIndexesCount)\n      let randomOptionsIndexes = []\n\n      while (randomOptionsIndexes.length < minOptionToSelect) {\n        const randomOptionIndex = optionsIndexes[Random.genInt(0, optionsIndexesCount - 1)]\n\n        if (!randomOptionsIndexes.includes(randomOptionIndex)) {\n          randomOptionsIndexes = [...randomOptionsIndexes, randomOptionIndex]\n        }\n      }\n\n      return randomOptionsIndexes\n    }\n  }\n\n  genCheckbox (input) {\n    const reg = /\\[/g\n    if (reg.test(input.getAttribute('name'))) {\n      const checkboxesIndexes = [...document.querySelectorAll(`input[name^=${input.getAttribute('name')\n        .split('[')[0]}\\\\[]`)]\n        .map((_, index) => index)\n\n      const minCheckboxToCheck = Random.genInt(1, checkboxesIndexes.length)\n      let randomCheckboxesIndexes = []\n\n      while (randomCheckboxesIndexes.length < minCheckboxToCheck) {\n        const randomCheckboxIndex = checkboxesIndexes[Random.genInt(0, checkboxesIndexes.length - 1)]\n\n        if (!randomCheckboxesIndexes.includes(randomCheckboxIndex)) {\n          randomCheckboxesIndexes = [...randomCheckboxesIndexes, randomCheckboxIndex]\n        }\n      }\n\n      return randomCheckboxesIndexes\n    } else {\n      return Random.genBool()\n    }\n  }\n\n  genRadio (input) {\n    const radioIndexes = [...document.querySelectorAll(`[name^=${input.getAttribute('name').split('[')[0]}]`)].map((_, index) => {\n      return index\n    })\n\n    return radioIndexes[Random.genInt(0, radioIndexes.length - 1)]\n  }\n\n  genDatalist (input) {\n    const options = document.querySelectorAll(`datalist#${input.getAttribute('list')} option`)\n    if (options !== null) {\n      const optionsIndexes = [...options].map((option, index) => option.value.length > 0 ? index : false).filter(Boolean)\n\n      return optionsIndexes[Random.genInt(0, optionsIndexes.length - 1)]\n    }\n  }\n\n  genRange (input) {\n    const min = input.getAttribute('min') ?? 0\n    const max = input.getAttribute('max') ?? 100\n\n    return Random.genInt(min, max)\n  }\n\n  genNumber (input) {\n    const min = input.getAttribute('min') ?? -1000\n    const max = input.getAttribute('max') ?? 1000\n\n    return Random.genInt(min, max)\n  }\n\n  genProgress (input) {\n    const max = input.getAttribute('max') ?? 100\n\n    return Random.genInt(0, max)\n  }\n\n  genMeter (input) {\n    return this.genNumber(input)\n  }\n\n  genDate (input, type = 'date') {\n    const start = input.getAttribute('min') ?? '1970-01-01'\n    const end = input.getAttribute('max') ?? '2099-12-31'\n    let date\n\n    switch (type) {\n      case 'datetime-local':\n        date = Random.genDatetime(start, end)\n        break\n      case 'month':\n        date = Random.genMonth(start, end)\n        break\n      case 'week':\n        date = Random.genWeek(start, end)\n        break\n      case 'time':\n        date = Random.genTime(start, end)\n        break\n      case 'date':\n        date = Random.genDate(start, end)\n        break\n    }\n\n    return date\n  }\n\n  genColor () {\n    return `#${Math.floor(Math.random() * 16_777_215).toString(16)}`\n  }\n\n  static parse (string) {\n    const match = string.match(/^(\\w+)/)\n    if (match) {\n      const stringType = match[1]\n      const splitArgs = string.split('|')\n      const options = {}\n      if (splitArgs.length > 0) {\n        for (let i = 0; i < splitArgs.length; i++) {\n          const splitArg = splitArgs[i].split(':')\n          options[splitArg[0]] = splitArg[1]\n        }\n      }\n\n      return Random.gen(stringType, options)\n    }\n  }\n\n  static gen (stringType, options) {\n    const alphaLower = 'abcdefghijklmnopqrstuvwxyz'\n    const alphaUpper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    const alpha = alphaLower + alphaUpper\n    const digit = '0123456789'\n    const specialsChars = ' !\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'\n    const allChars = alpha + digit + specialsChars\n\n    const stringTypes = {\n      string: alpha,\n      email: alphaLower,\n      password: allChars,\n      digit\n    }\n\n    const minLength = options.min || 12\n    const maxLength = options.max || 16\n    const randomLength = Random.genInt(minLength, maxLength)\n\n    options.len = options.len || randomLength\n    options.chars = stringTypes[stringType]\n\n    let randomString = ''\n    if (stringType === 'email') {\n      randomString += Random.genEmail(options)\n    } else {\n      if (options.chars) {\n        randomString += Random.genString(options)\n      }\n    }\n\n    return randomString\n  }\n\n  static genEmail (options) {\n    const length = options.len >= 5 ? options.len : 5\n\n    const tldLength = 2\n    const domainLength = Math.floor(length / 3)\n    const usernameLength = length - domainLength + tldLength\n\n    let randomString = ''\n\n    randomString += Random.genString({ ...options, len: usernameLength })\n    randomString += '@'\n    randomString += Random.genString({ ...options, len: domainLength })\n    randomString += '.'\n    randomString += Random.genString({ ...options, len: tldLength })\n\n    return randomString\n  }\n\n  static genString (options) {\n    const chars = options.chars\n    const length = options.len\n\n    let randomString = ''\n\n    for (let i = 0; i < length; i++) {\n      randomString += chars[Math.floor(Math.random() * chars.length)]\n    }\n\n    return randomString\n  }\n\n  static getAttributesByKeyValue (input) {\n    const attrNames = ['name', 'id', 'class']\n\n    const attributesByKV = attrNames.reduce((acc, key) => {\n      const attrValue = input.getAttribute(key)\n      if (typeof attrValue !== 'undefined') {\n        acc[key] = attrValue\n      }\n\n      return acc\n    }, {})\n\n    return attributesByKV\n  }\n\n  static genInt (min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min)\n  }\n\n  static genBool () {\n    return Math.random() < 0.5\n  }\n\n  static genDateBetween (start, end) {\n    start = start instanceof Date ? start : new Date(start)\n    end = end instanceof Date ? end : new Date(end)\n\n    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()))\n  }\n\n  static genDate (start, end) {\n    const date = Random.genDateBetween(start, end)\n    const dateFormat = Random.getDate(Random.getDatetime(date))\n\n    return dateFormat\n  }\n\n  static genDatetime (start, end) {\n    const date = Random.genDateBetween(start, end)\n\n    return Random.getDatetime(date)\n  }\n\n  static genMonth (start, end) {\n    return Random.getMonth(Random.genDate(start, end))\n  }\n\n  static genWeek (start, end) {\n    return Random.getWeek(Random.genDate(start, end))\n  }\n\n  static genTime (start, end) {\n    return Random.getTime(Random.genDatetime(start, end))\n  }\n\n  static getDatetime (date) {\n    if (typeof date === 'undefined') {\n      date = new Date()\n    }\n\n    const datetime = date.toISOString().split('.')[0]\n\n    return datetime\n  }\n\n  static getDate (datetime) {\n    return datetime.split('T')[0]\n  }\n\n  static getMonth (date) {\n    date = date instanceof Date ? date : new Date(date)\n\n    return `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}`\n  }\n\n  static getWeek (date) {\n    date = date instanceof Date ? date : new Date(date)\n\n    return `${date.getFullYear()}-W${Random.getWeekNumber(date).toString().padStart(2, '0')}`\n  }\n\n  static getTime (datetime) {\n    return datetime.split('T')[1]\n  }\n\n  static getWeekNumber (date) {\n    date = date instanceof Date ? date : new Date(date)\n    const startDate = new Date(date.getFullYear(), 0, 1)\n    const days = Math.floor((date - startDate) / (24 * 60 * 60 * 1000))\n    const weekNumber = Math.ceil(days / 7)\n\n    return weekNumber\n  }\n\n  static getRandomItem (array) {\n    return array[Math.floor(Math.random() * array.length)]\n  }\n}\n", "import * as utils from './utils.js'\nimport Random from './random.js'\nimport Overlay from './overlay.js'\n\nexport class Autofill {\n  autofillInfos = {\n    author: '0kyn',\n    version: '1.1.2',\n    name: 'Autofill.js',\n    github: 'https://github.com/0kyn/autofill-js',\n    npm: 'https://www.npmjs.com/package/autofill-js'\n  }\n\n  autofillConfig = {\n    autofill: true, // enable autofill\n    autosubmit: false, // emit submit event after form's inputs filling\n    camelize: false, // e.g. allow input property 'inputName' to handle 'input-name' or 'input_name'\n    generate: false, // generate random value where an input's value is formatted as follow {{ password|len:16 }}\n    inputAttributes: ['data-autofill', 'name', 'id', 'class'], // input key attributes targets ordered from the highest priority to the lowest\n    inputAttributesSkip: [], // skip autofilling when input has specific attribute. e.g. 'disabled' or 'readonly',\n    inputTypesSkip: [], // skip autofilling when input has specific type\n    formsSelectors: ['form'], // default form query selector\n    inputsSelectors: ['input', 'textarea', 'select', 'progress', 'meter'], // default inputs support\n    maxlength: false, // truncate if value length > maxlength attribute\n    minlength: false, // fill with random char if value length < minlength attribute\n    overlay: false, // display an overlay with config infos & reset/autofill buttons\n    override: true, // override already defined input value\n    random: false, // if an input value is not defined it fills with a random value\n    randomPreset: false, // if random === true && randomPreset === true then it tries to find a significant preset\n    url: false // JSON config file url\n  }\n\n  constructor (formsSelectors, options) {\n    this.infos = { ...this.autofillInfos }\n    this.config = { ...this.autofillConfig }\n\n    this.initOptions(formsSelectors, options)\n\n    if (this.hasOptions()) {\n      this.initFormsOptions()\n      this.initConfig()\n    }\n  }\n\n  async init () {\n    if (this.config.url) {\n      const configFile = await this.loadFromJson(this.config.url)\n      const jsonFormsOptions = { forms: configFile.forms }\n      const formsSelectors = Object.keys(configFile.forms)\n      this.config = { ...this.autofillConfig, ...configFile.config, ...this.options }\n      this.config.formsSelectors = formsSelectors\n      this.formsOptions = this.mergeJsonFormsOptions(jsonFormsOptions, this.formsOptions)\n    }\n\n    if (this.hasFormsOptions()) {\n      this.initForms()\n    }\n\n    this.initDomForms()\n\n    if (this.config.autofill) {\n      this.fill()\n    }\n    if (this.config.overlay) {\n      const overlay = new Overlay(this)\n      overlay.show()\n    }\n\n    return this\n  }\n\n  async loadFromJson (url) {\n    const response = await fetch(url)\n    const string = await response.text()\n\n    try {\n      const object = JSON.parse(string)\n\n      return object\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  mergeJsonFormsOptions (...args) {\n    const target = {}\n\n    const merger = (obj) => {\n      for (const prop in obj) {\n        if (utils.hasProp(prop, obj)) {\n          if (Object.prototype.toString.call(obj[prop]) === '[object Object]') {\n            target[prop] = this.mergeJsonFormsOptions(target[prop], obj[prop])\n          } else {\n            target[prop] = obj[prop]\n          }\n        }\n      }\n    }\n\n    for (let i = 0; i < args.length; i++) {\n      merger(args[i])\n    }\n\n    return target\n  };\n\n  initOptions (formsSelectors, options) {\n    if (typeof formsSelectors === 'object') {\n      this.options = formsSelectors\n    } else {\n      this.options = options ?? {}\n    }\n\n    this.initFormsSelectors(formsSelectors)\n  }\n\n  initFormsSelectors (options) {\n    if (typeof options !== 'undefined') {\n      if (typeof options === 'string') {\n        this.options.formsSelectors = options.split(',').map(item => item.trim())\n      } else if (Array.isArray(options)) {\n        this.options.formsSelectors = options\n      } else if (options.forms) {\n        this.options.formsSelectors = Object.keys(options.forms)\n      } else if (options.formsSelectors) {\n        this.initFormsSelectors(options.formsSelectors)\n      }\n    }\n  }\n\n  initConfig () {\n    for (const key in this.options) {\n      const option = this.options[key]\n\n      if (utils.hasProp(key, this.autofillConfig)) {\n        this.config[key] = option\n      }\n    }\n  }\n\n  initFormsOptions () {\n    const formsOptions = {}\n\n    for (const key in this.options) {\n      const option = this.options[key]\n\n      if (!utils.hasProp(key, this.autofillConfig)) {\n        formsOptions[key] = option\n      }\n    }\n    if (Object.keys(formsOptions).length > 0) {\n      this.formsOptions = formsOptions\n    }\n  }\n\n  initDomForms () {\n    const domInputs = document.querySelectorAll(this.config.inputsSelectors)\n    let lastForm\n    this.domForms = []\n\n    let i = -1\n    domInputs.forEach((input) => {\n      const form = input.closest('form')\n      const condHasForm = form !== null && lastForm !== form\n      const condOrphan = form === null && lastForm !== null\n\n      if (condHasForm || condOrphan) {\n        i++\n        this.domForms[i] = { form, inputs: [] }\n      }\n\n      lastForm = form\n      this.domForms[i].inputs = [...this.domForms[i].inputs, input]\n    })\n  }\n\n  initForms () {\n    const forms = {}\n\n    this.config.formsSelectors.forEach(formsSelector => {\n      let inputs = {}\n\n      if (this.formsOptions.inputs) {\n        inputs = this.formsOptions.inputs\n      } else if (!this.formsOptions.forms) {\n        inputs = this.formsOptions\n      } else if (this.formsOptions.forms[formsSelector]) {\n        const form = this.formsOptions.forms[formsSelector]\n        forms[formsSelector] = form\n        inputs = form.inputs ?? form\n      }\n\n      forms[formsSelector] = { ...forms[formsSelector], inputs }\n    })\n\n    this.forms = forms\n  }\n\n  getFormConfig (formSelector) {\n    const config = { ...this.forms[formSelector], formSelector }\n    const formConfig = { ...this.config, ...config }\n    delete formConfig.inputs\n\n    return formConfig\n  }\n\n  submit (form, timeout = 1000) {\n    setTimeout(() => {\n      const event = new CustomEvent('submit')\n      form.dispatchEvent(event)\n    }, timeout)\n  }\n\n  fill () {\n    if (Object.keys(this.domForms).length === 0) {\n      console.log('No forms found in the HTML DOM')\n      console.log('Handle inputs')\n      this.handleForm(document)\n    } else {\n      this.domForms.forEach(dForm => this.handleForm(dForm))\n    }\n  }\n\n  handleForm (dForm) {\n    let { form, inputs } = dForm\n    const formSelector = this.getFormSelector(form)\n\n    let config = this.config\n\n    if (this.hasFormsOptions()) {\n      config = this.getFormConfig(formSelector)\n\n      if (config.random || typeof formSelector === 'undefined') {\n        this.randomInstance = new Random({ withPreset: config.randomPreset })\n      }\n    } else {\n      this.randomInstance = new Random({ withPreset: true })\n    }\n\n    inputs = this.inputsConfigFilter(inputs, config)\n\n    const defaultInputs = this.getDefaultInputs(inputs)\n    const fileInputs = this.getFileInputs(inputs)\n    const checkboxesGroup = this.getCheckboxesGroup(inputs)\n    const radiosGroup = this.getRadios(inputs)\n    const selects = this.getSelects(inputs)\n    const datalists = this.getDatalists(inputs)\n\n    defaultInputs.forEach(input => this.handleDefaultInput(input, config))\n    fileInputs.forEach(input => this.handleFileInput(input, config))\n    checkboxesGroup.forEach(group => this.handleCheckboxGroup(group, config))\n    radiosGroup.forEach(group => this.handleRadioGroup(group, config))\n    selects.forEach(input => this.handleSelect(input, config))\n    datalists.forEach(input => this.handleDatalist(input, config))\n\n    if (config?.autosubmit) {\n      this.submit(form)\n    }\n  }\n\n  getAfValue (afKey, config) {\n    return this.forms[config.formSelector].inputs[afKey]\n  }\n\n  getAfKey (input, config) {\n    for (let i = 0; i < this.config.inputAttributes.length; i++) {\n      const inputAttrName = this.config.inputAttributes[i]\n      const inputAttrValue = input.getAttribute(inputAttrName) ?? undefined\n\n      if (typeof inputAttrValue !== 'undefined') {\n        const afKey = inputAttrValue.split('[')[0]\n        if (typeof this.getAfValue(afKey, config) !== 'undefined') {\n          return afKey\n        } else if (config.camelize) {\n          const camelKey = utils.toCamelCase(afKey)\n          if (typeof this.getAfValue(camelKey, config) !== 'undefined') {\n            return camelKey\n          }\n        }\n      }\n    }\n  }\n\n  getInputAfValue (input, config) {\n    let value\n\n    if (this.hasFormsOptions() && this.hasFormAndInputs(config)) {\n      const afKey = this.getAfKey(input, config)\n\n      if (typeof afKey !== 'undefined') {\n        value = this.getAfValue(afKey, config)\n\n        const stringToGen = this.needToGenerate(value, config)\n        if (stringToGen) {\n          value = Random.parse(stringToGen)\n        }\n      } else {\n        if (config.random) {\n          value = this.randomInstance.genInputValue(input)\n        }\n      }\n    } else {\n      // zero config\n      value = this.randomInstance.genInputValue(input)\n    }\n\n    if (config.minlength) {\n      const minlength = Number.parseInt(input.getAttribute('minlength'))\n      if (!Number.isNaN(minlength) && value.length < minlength) {\n        value += Random.gen('string', { len: minlength - value.length })\n      }\n    }\n\n    if (config.maxlength) {\n      const maxlength = Number.parseInt(input.getAttribute('maxlength'))\n      if (!Number.isNaN(maxlength) && value.length > maxlength) {\n        value = utils.truncate(value, maxlength)\n      }\n    }\n\n    return value\n  }\n\n  handleDefaultInput (input, config) {\n    if (config.override || input.value.length === 0) {\n      const value = this.getInputAfValue(input, config)\n\n      if (typeof value !== 'undefined') {\n        input.value = value\n      }\n    }\n  }\n\n  handleFileInput (input) {\n    console.log(input, 'I can\\'t handle you for now...')\n  }\n\n  handleCheckboxGroup (group, config) {\n    this.handleCheckboxOrRadioGroups(group, config)\n  }\n\n  handleRadioGroup (group, config) {\n    this.handleCheckboxOrRadioGroups(group, config)\n  }\n\n  handleCheckboxOrRadioGroups (group, config) {\n    const input = group[0]\n\n    if (!config.override) {\n      const groupHasInputChecked = typeof group.find(input => input.checked) !== 'undefined'\n\n      if (groupHasInputChecked) return\n    }\n    const values = utils.asArray(this.getInputAfValue(input, config))\n\n    values.forEach((value, vIndex) => {\n      group.forEach((input, index) => {\n        if (typeof value === 'string' && input.value === value) {\n          input.checked = true\n        } else if (typeof value === 'number' && index === value) {\n          input.checked = true\n        } else if (typeof value === 'boolean' && index === vIndex) {\n          input.checked = value\n        }\n      })\n    })\n  }\n\n  handleSelect (input, config) {\n    const options = input.querySelectorAll('option')\n    if (!config.override) {\n      const optionsHasSelected = typeof [...options].find(option => option.selected) !== 'undefined'\n\n      if (optionsHasSelected) return\n    }\n    const values = utils.asArray(this.getInputAfValue(input, config))\n\n    values.forEach((value) => {\n      if (typeof value === 'string') {\n        input.value = value\n      } else if (typeof value === 'number') {\n        options[value].selected = true\n      }\n    })\n  }\n\n  handleDatalist (input, config) {\n    if (config.override || input.value.length === 0) {\n      const value = this.getInputAfValue(input, config)\n      if (typeof value === 'string') {\n        input.value = value\n      } else if (typeof value === 'number') {\n        const options = document.querySelectorAll(`datalist#${input.getAttribute('list')} option`)\n        if (options !== null) {\n          input.value = options[value].value\n        }\n      }\n    }\n  }\n\n  needToGenerate (value, config) {\n    const reg = /{{\\s(.+?)\\s}}/\n\n    if (config.generate && typeof value === 'string' && reg.test(value)) {\n      return value.match(reg)[1]\n    }\n\n    return false\n  }\n\n  getFormSelector (form) {\n    const formsSelectors = this.config.formsSelectors\n\n    for (let i = 0; i < formsSelectors.length; i++) {\n      const formSelector = formsSelectors[i]\n      const formSelectored = document.querySelector(formSelector)\n\n      if (formSelectored === form) {\n        return formSelector\n      }\n    }\n  }\n\n  getDefaultInputs (inputs) {\n    return inputs.filter(input => {\n      const excludedInputTypes = ['checkbox', 'radio', 'file', 'reset', 'submit', 'button']\n      const excludedAttributes = ['list']\n\n      const condType = !excludedInputTypes.includes(input.type)\n      const condAttr = utils.notContainsAttributes(input, excludedAttributes)\n\n      return condType && condAttr\n    })\n  }\n\n  getFileInputs (inputs) {\n    return inputs.filter(input => input.type === 'file')\n  }\n\n  getCheckboxesGroup (inputs) {\n    const reg = /(.+)\\[/\n    let checkboxesGroup = []\n\n    for (let i = 0; i < inputs.length; i++) {\n      const input = inputs[i]\n      if (input.type !== 'checkbox') continue\n\n      const attrValue = input.getAttribute('name')\n      if (attrValue?.match(reg)) {\n        const inputExists = utils.itemExists(input, checkboxesGroup)\n\n        if (!inputExists) {\n          const reg2 = new RegExp(`^${attrValue.match(reg)[1]}\\\\[`)\n          const checkboxGroup = inputs.filter(input => input.type === 'checkbox' && reg2.test(input.getAttribute('name')))\n\n          if (checkboxGroup.length > 0) {\n            checkboxesGroup = [...checkboxesGroup, [...checkboxGroup]]\n          }\n        }\n      } else {\n        checkboxesGroup = [...checkboxesGroup, [input]]\n      }\n    }\n\n    return checkboxesGroup\n  }\n\n  getSelects (inputs) {\n    return inputs.filter(input => ['select-one', 'select-multiple'].includes(input.type))\n  }\n\n  getDatalists (inputs) {\n    return inputs.filter(input => input.getAttribute('list') !== null)\n  }\n\n  getRadios (inputs) {\n    let radios = []\n\n    for (let i = 0; i < inputs.length; i++) {\n      const input = inputs[i]\n      const attrValue = input.getAttribute('name')\n      const inputExists = utils.itemExists(input, radios)\n      if (!inputExists) {\n        const radioGroup = inputs.filter(input => input.type === 'radio' && input.getAttribute('name') === attrValue)\n        if (radioGroup.length > 0) {\n          radios = [...radios, [...radioGroup]]\n        }\n      }\n    }\n\n    return radios\n  }\n\n  hasOptions () {\n    return typeof this.options !== 'undefined' && Object.keys(this.options).length > 0\n  }\n\n  hasFormsOptions () {\n    return typeof this.formsOptions !== 'undefined'\n  }\n\n  hasFormAndInputs (formConfig) {\n    return formConfig && this.forms[formConfig.formSelector] && this.forms[formConfig.formSelector].inputs\n  }\n\n  inputsConfigFilter (inputs, config) {\n    return inputs.filter(input => {\n      const condAttrs = utils.notContainsAttributes(input, config.inputAttributesSkip)\n      const condTypes = utils.notContainsTypes(input, config.inputTypesSkip)\n      const cond = condAttrs && condTypes\n\n      return cond\n    })\n  }\n}\n\nexport const autofill = (formsSelectors, options) => {\n  return new Promise(resolve => {\n    const af = new Autofill(formsSelectors, options)\n    if (document.readyState !== 'loading') {\n      resolve(af.init())\n    } else {\n      document.addEventListener('DOMContentLoaded', () => {\n        resolve(af.init())\n      })\n    }\n  })\n}\n\nwindow.autofill = autofill\n"],
  "mappings": "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",
  "names": ["require_overlay", "__commonJSMin", "hasProp", "name", "obj", "asArray", "item", "itemExists", "array", "i", "element", "truncate", "string", "length", "toCamelCase", "index", "notContainsAttributes", "element", "attributes", "excludedAttributes", "attr", "notContainsTypes", "input", "types", "_Random", "withPreset", "key", "mapChars", "char", "randomYear", "randomMonth", "randomDay", "type", "attrs", "camelType", "toCamelCase", "pKey", "aKey", "attrVal", "reg", "input", "inputValue", "stringType", "attributes", "preset", "minlength", "maxlength", "selectType", "optionsIndexes", "option", "index", "optionsIndexesCount", "minOptionToSelect", "randomOptionsIndexes", "randomOptionIndex", "checkboxesIndexes", "_", "minCheckboxToCheck", "randomCheckboxesIndexes", "randomCheckboxIndex", "radioIndexes", "options", "min", "max", "start", "end", "date", "string", "match", "splitArgs", "splitArg", "alphaLower", "alpha", "digit", "specialsChars", "allChars", "stringTypes", "minLength", "maxLength", "randomLength", "randomString", "length", "tldLength", "domainLength", "usernameLength", "chars", "i", "acc", "attrValue", "datetime", "startDate", "days", "array", "Random", "__publicField", "import_overlay", "Autofill", "formsSelectors", "options", "configFile", "jsonFormsOptions", "Overlay", "url", "string", "error", "args", "target", "merger", "obj", "prop", "hasProp", "i", "item", "key", "option", "formsOptions", "domInputs", "lastForm", "input", "form", "forms", "formsSelector", "inputs", "formSelector", "config", "formConfig", "timeout", "event", "dForm", "Random", "defaultInputs", "fileInputs", "checkboxesGroup", "radiosGroup", "selects", "datalists", "group", "afKey", "inputAttrName", "inputAttrValue", "camelKey", "toCamelCase", "value", "stringToGen", "minlength", "maxlength", "truncate", "asArray", "vIndex", "index", "reg", "excludedInputTypes", "excludedAttributes", "condType", "condAttr", "notContainsAttributes", "attrValue", "itemExists", "reg2", "checkboxGroup", "radios", "radioGroup", "condAttrs", "condTypes", "notContainsTypes", "autofill", "resolve", "af"]
}
